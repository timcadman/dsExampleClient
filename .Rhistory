builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris"
)
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExampleClient/R/ds.funLevels.R", echo=TRUE)
ds.funLevels(x = "iris", fun_message = "Happy Friday: here are your levels")
datashield.levels()
datashield.errors()
ds.funLevels(x = "iris", fun_message = "HappyFriday")
datashield.errors()
dslite.server$config(defaultDSConfiguration(include="dsExample"))
dslite.server$config(defaultDSConfiguration(include="dsExample"))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
dslite.server$aggregateMethod("colnamesDS", "colnamesDS")
dslite.server$aggregateMethod("lsDS", "lsDS")
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris", fun_message = "HappyFriday")
datashield.errors()
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample/R/funLevelsDS.R", echo=TRUE)
dslite.server$config(defaultDSConfiguration(include="dsExample"))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
dslite.server$aggregateMethod("colnamesDS", "colnamesDS")
dslite.server$aggregateMethod("lsDS", "lsDS")
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris", fun_message = "HappyFriday")
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
thr <- dsBase::listDisclosureSettingsDS()
nfilter.levels.density <- as.numeric(thr$nfilter.levels.density)
thr
iris
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
thr <- dsBase::listDisclosureSettingsDS()
thr
nfilter.levels.density <- as.numeric(thr$nfilter.levels.density)
out <- levels(x)
out
x
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
thr <- dsBase::listDisclosureSettingsDS()
nfilter.levels.density <- as.numeric(thr$nfilter.levels.density)
data <- eval(parse(text=x), envir = parent.frame())
data
levels_out <- levels(data)
levels_out
nfilter.levels.density
options(
datashield.privacyControlLevel = "banana",
nfilter.tab = 3,
nfilter.subset = 3,
nfilter.glm = 0.33,
nfilter.string = 80,
nfilter.stringShort = 20,
nfilter.kNN = 3,
nfilter.levels.density = 0.33,
nfilter.levels.max = 40,
nfilter.noise = 0.25,
nfilter.privacy.old = 5
)
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
data <- eval(parse(text=x), envir = parent.frame())
levels_out <- levels(data)
data
levels_out
.get_density_setting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
levels_density <- .get_density_setting()
levels_density
.calculateThreshold <- function(input, levels_density) {
input_length <- length(input)
return(input_length * disclosure_value)
}
threshold <- .calculateThreshold(input, levels_density)
data
input = data
threshold <- .calculateThreshold(input, levels_density)
levels_density <- .getDensitySetting()
.getDensityDetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
levels_density <- .getDensitySetting()
.getDensitySetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
levels_density <- .getDensitySetting()
threshold <- .calculateThreshold(input, levels_density)
levels_density <- .getDensitySetting()
levels_density
.calculateThreshold <- function(input, levels_density) {
input_length <- length(input)
return(input_length * levels_density)
}
threshold <- .calculateThreshold(input, levels_density)
threshold
levels_density
threshold
length(input)
threshold
levels_density
threshold <- .checkThreshold(input, levels_density)
threshold
levels
levels(iris$Species)
levels_out
cli_abort(
c("The levels cannot be returned due to a disclosure risk",
"i" = "The length of the variable is {length(input)} and the number of levels is {length(levels_out)}",
"i" = "Based on current disclosure settings the maximum number of levels that can be returned is
{threshold}",
call = NULL
)
)
cli_abort(
c(
"x" = "The levels cannot be returned due to a disclosure risk",
"i" = "The length of the variable is {length(input)} and the number of levels is {length(levels_out)}",
"i" = "Based on current disclosure settings the maximum number of levels that can be returned is
{threshold}",
call = NULL
)
)
.checkLevelsDisclosureRisk()
.checkLevelsDisclosureRisk <- function(input, levels_out) {
levels_density <- .getDensitySetting()
threshold <- .checkThreshold(input, levels_density)
.throwErrorIfRisk(input, levels_out, threshold)
}
.throwErrorIfRisk <- function(input, levels_out, threshold) {
if (threshold < length(levels_out)) {
cli_abort(
c(
"x" = "The levels cannot be returned due to a disclosure risk",
"i" = "The length of the variable is {length(input)} and the number of levels is {length(levels_out)}",
"i" = "Based on current disclosure settings the maximum number of levels that can be returned is
{threshold}",
call = NULL
)
)
}
}
.calculateThreshold <- function(input, levels_density) {
input_length <- length(input)
return(input_length * levels_density)
}
.getDensitySetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
}
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
thr <- dsBase::listDisclosureSettingsDS()
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample/R/funLevelsDS.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample/R/funLevelsDS.R", echo=TRUE)
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
# Check Permissive Privacy Control Level.
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
data <- eval(parse(text=x), envir = parent.frame())
levels_out <- levels(data)
.checkLevelsDisclosureRisk()
.getDensitySetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
.checkLevelsDisclosureRisk()
.getDensitySetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
.getDensitySetting
levels_density <- .getDensitySetting()
threshold <- .checkThreshold(input, levels_density)
.calculateThreshold <- function(input, levels_density) {
input_length <- length(input)
return(input_length * levels_density)
}
.getDensitySetting <- function() {
thr <- dsBase::listDisclosureSettingsDS()
return(as.numeric(thr$nfilter.levels.density))
}
.checkLevelsDisclosureRisk()
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample/R/funLevelsDS.R", echo=TRUE)
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
# Check Permissive Privacy Control Level.
dsBase::checkPermissivePrivacyControlLevel(c('permissive', 'banana'))
data <- eval(parse(text=x), envir = parent.frame())
levels_out <- levels(data)
.checkLevelsDisclosureRisk()
.checkLevelsDisclosureRisk(data, levels_out)
levels_out
paste0(
fun_message, levels_out
)
paste0(
fun_message, levels_out, collapse = ""
)
paste0(
fun_message, levels_out, sep = ""
)
paste(
fun_message, levels_out, sep = ""
)
paste(
fun_message, levels_out, collapse = ""
)
paste(
fun_message,       paste0(levels_out)
)
paste0(levels_out)
fun_message, paste(levels_out, collapse = ", ")
paste(
fun_message, paste(levels_out, collapse = ", ")
)
return(
paste(
fun_message, ": ", paste(levels_out, collapse = ", ")
)
)
paste(
fun_message, ": ", paste(levels_out, collapse = ", ")
)
rm(list = ls())
data("iris")
dslite.server <- newDSLiteServer(
tables = list(
iris = iris
)
)
library(DSLitee)
library(DSLite)
data("iris")
dslite.server <- newDSLiteServer(
tables = list(
iris = iris
)
)
dslite.server$config(defaultDSConfiguration(include="dsExample"))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
options(
datashield.privacyControlLevel = "banana",
nfilter.tab = 3,
nfilter.subset = 3,
nfilter.glm = 0.33,
nfilter.string = 80,
nfilter.stringShort = 20,
nfilter.kNN = 3,
nfilter.levels.density = 0.33,
nfilter.levels.max = 40,
nfilter.noise = 0.25,
nfilter.privacy.old = 5
)
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
load("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample")
load_all("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample")
devtools::load_all("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample")
devtools::load_all("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExampleClient")
dslite.server <- newDSLiteServer(
tables = list(
iris = iris
)
)
dslite.server$config(defaultDSConfiguration(include="dsExample"))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
options(
datashield.privacyControlLevel = "banana",
nfilter.tab = 3,
nfilter.subset = 3,
nfilter.glm = 0.33,
nfilter.string = 80,
nfilter.stringShort = 20,
nfilter.kNN = 3,
nfilter.levels.density = 0.33,
nfilter.levels.max = 40,
nfilter.noise = 0.25,
nfilter.privacy.old = 5
)
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
datashield.errors()
options(datashield.errors.print = TRUE)
dslite.server$config(defaultDSConfiguration(include=c("dsBase", "dsExample")))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
dslite.server$aggregateMethod("checkPermissivePrivacyControlLevel", "checkPermissivePrivacyControlLevel")
options(
datashield.privacyControlLevel = "banana",
nfilter.tab = 3,
nfilter.subset = 3,
nfilter.glm = 0.33,
nfilter.string = 80,
nfilter.stringShort = 20,
nfilter.kNN = 3,
nfilter.levels.density = 0.33,
nfilter.levels.max = 40,
nfilter.noise = 0.25,
nfilter.privacy.old = 5
)
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample/R/funLevelsDS.R", echo=TRUE)
devtools::load_all("~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample")
dslite.server$config(defaultDSConfiguration(include=c("dsBase", "dsExample")))
dslite.server$aggregateMethod("funLevelsDS", "funLevelsDS")
dslite.server$aggregateMethod("listDisclosureSettingsDS", "listDisclosureSettingsDS")
dslite.server$aggregateMethod("checkPermissivePrivacyControlLevel", "checkPermissivePrivacyControlLevel")
options(
datashield.privacyControlLevel = "banana",
nfilter.tab = 3,
nfilter.subset = 3,
nfilter.glm = 0.33,
nfilter.string = 80,
nfilter.stringShort = 20,
nfilter.kNN = 3,
nfilter.levels.density = 0.33,
nfilter.levels.max = 40,
nfilter.noise = 0.25,
nfilter.privacy.old = 5
)
builder <- DSI::newDSLoginBuilder()
builder$append(
server = "server_1",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
builder$append(
server = "server_2",
url = "dslite.server",
table = "iris",
driver = "DSLiteDriver"
)
logindata <- builder$build()
conns <- DSI::datashield.login(logins = logindata, assign = FALSE)
datashield.assign.table(
conns = conns,
table = "iris",
symbol = "iris")
ds.funLevels(x = "iris$Species", fun_message = "HappyFriday")
usethis::use_test("funLevelsDS.r")
armadillo_url <- "https://armadillo-playground.molgenis.net/"
armadillo.login(armadillo_url)
library(MolgenisArmadillo)
armadillo.login(armadillo_url)
ss_path <- "~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample"
ss_build_path <- devtools::build(ss_path)
ss_build_path
armadillo.install_packages(ss_build_path)
token <- armadillo.get_token(local_url)
token <- armadillo.get_token(armadillo_url)
builder <- newDSLoginBuilder()
library(DSI)
builder <- newDSLoginBuilder()
builder$append(
url = local_url,
server = "cohort_1",
token = token,
driver = "ArmadilloDriver")
builder <- newDSLoginBuilder()
builder$append(
url = armadillo_url,
server = "cohort_1",
token = token,
driver = "ArmadilloDriver")
logindata <- builder$build()
conns <- datashield.login(logins = logindata, assign = FALSE)
library(DSMolgenisArmadillo)
token <- armadillo.get_token(armadillo_url)
builder <- newDSLoginBuilder()
builder$append(
url = armadillo_url,
server = "cohort_1",
token = token,
driver = "ArmadilloDriver")
logindata <- builder$build()
conns <- datashield.login(logins = logindata, assign = FALSE)
ds.funLevels("mtcars", "This is a fun message", conns)
devtools::load_all(".")
ds.funLevels("mtcars", "This is a fun message", conns)
datashield.errors()
ds.funLevels("mtcars", "ThisIsAFunMessage", conns)
options(datashield.errors.print = TRUE)
ds.funLevels("mtcars", "ThisIsAFunMessage", conns)
armadillo_url <- "https://armadillo-playground.molgenis.net/"
ss_path <- "~/Library/Mobile Documents/com~apple~CloudDocs/work/dsExample"
ss_build_path <- devtools::build(ss_path)
armadillo.install_packages(ss_build_path)
token <- armadillo.get_token(armadillo_url)
builder <- newDSLoginBuilder()
builder$append(
url = armadillo_url,
server = "cohort_1",
token = token,
driver = "ArmadilloDriver")
logindata <- builder$build()
conns <- datashield.login(logins = logindata, assign = FALSE)
ds.funLevels("mtcars", "ThisIsAFunMessage", conns)
